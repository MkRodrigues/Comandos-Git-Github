Comandos Git 

Comandos Gerais
git config --global -l (-l de list/lista)- Lista todas configurações do Git
Configurar um novo editor de texto para o Git - git config --global core.editor [nome do novo editor] 
git log - Mostra as logs com os detalhes dos arquivos (hash do commit, nome, data e autor do commit). O atalho "q" sai do comando de logs
git log --graph - Mostra logs detalhados (detalhamento da árvore hierarquica de branchs e commits)
git log --graph --oneline - Mostra as mesmas informações da árvore em uma linha sem os detalhes das hashs do commits

GIT ALIAS (Cria atalhos dos comandos do git)
git config --global alias.{atalho para o comando} {nome do comando desejado}
ex.: git config --global alias.s status
git config --get-regexp alias - Lista a Lista de Alias

GIT STASH (Salva Rascunhos dos arquivos para uso posterior)
git stash - Após o arquivo ser adicionado via git add, o comando Git Stash salva o arquivo ou as mudanças efetuadas naquele momento em uma área chamada WIP (Working in Progress), tirando o(s) mesmo(s) do Working Tree, salvando-o como rascunho.
git stash list - Lista os Stashs salvos
git stash apply - Aplica as mudanças salvas de volta ao Working Tree.
git stash clear - limpa todos os Stash salvos

GIT ISSUES (Cria um "Problema" a ser resolvido no Github)
A Issue deve ser criada na Github, porém pode ser referenciada no commit do repositório local através do comando: 
git commit -m"Nome do commit #{numero da issue a ser referenciada}" 
ex.: git commit -m "Primeiro commit #1"
Para fechar uma Issue, referencie a mesma no commit colocando a síntaxe closes antes da hash : git commit -m "Texto closes #1". 
Obs.: A Issue será fechada quando a branch for mergida com a master, ou se não houver branch, quando o push for realizado.

GIT TAG (Cria uma tag de versionamento no Github)
git tag -a {versão} -m "mudanças efetuadas naquela versão"
Uma Tag deve ser criada após o envio dos arquivos para o repositório remoto (github).
Git tag - Mostra as tags inseridas 
git push origin :{tag} - Apaga a tag selecionada no repositório remoto
git push origin master --tags - Este comando sobe as tags para o githubv 

Git Checkout - Exclusão de Modificações
Para excluir a modificação de um arquivo, voltando ele ao estado original, antes do mesmo ser inserido via Git Add, use o comando:
git checkout {nome do arquivo}
Obs.: As informações excluídas não poderão ser recuperadas.

GIT RESET
Para voltar um arquivo ou uma seleção de arquivos de uma área de Stagging (,Unstaged, Added). Use o comando:
git reset head {nome do arquivo}
Importante: A cláusula HEAD, diz aonde o status do arquivo está (Added), e através deste comando pode ser mudado.
Obs.: Podemos checar o estado da HEAD através do comando: 
git log --decorate -oneline
Para arquivos comitados, podemos usar o comando abaixo para voltar a Head para um/dois passo(s) anterior(es) ao estado original
Ex.: O comando git reset HEAD^ 
git reset --hard HASH do commit - Este comando apaga todas as alterações do commit informado para trás. 
A hash do commit pode ser acessado através do comando git log

git rm --cached {nome do arquivo} - Este comando diz ao Git, que não precisa mais rastrear as informações inseridas no arquivo

Git Branch
Git checkout -b {Nome da nova Branch} - Cria uma nova branch
Git branch - Mostra as Branchs criadas
Git checkout {nomeDaBranch}- Troca de uma branch para outra
Git branch -d {nome da branch} - Deleta a branch no repositório local
git push origin :{nome da branch} - Apaga a branch no repositório remoto.
git merge {nome da branch} - Une uma branch a outra (Lembre-se de estar branch de origem ao qual você deseja mergir)
git rebases